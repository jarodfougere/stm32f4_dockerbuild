{
    "folders": [
        {   
            //REPLACE THIS WITH THE PATH TO THE FOLDER CLONED FROM THE REPO
            "path": "C:\\Users\\cmatt\\Documents\\rimot-lowpower-sensorboard"
        }
    ],

    "settings": {
        "editor.tabCompletion": "on",
        "editor.wordWrap": "wordWrapColumn",
        "editor.detectIndentation": false,
        "extensions.ignoreRecommendations": false,
        "editor.autoClosingBrackets": "languageDefined",
        "window.zoomLevel": 0,
        // FILE SYSTEM
        "explorer.confirmDragAndDrop": false,
        "files.autoSave": "afterDelay",
        //CMAKE
        //more here: 
        //https://vector-of-bool.github.io/docs/vscode-cmake-tools/settings.html
        "cmake.loggingLevel": "debug", //USER MIGHT WANT TO CHANGE THIS ONE
        "cmake.configureOnOpen": false,
        "cmake.generator": "MinGW Makefiles",
        "cmake.mingwSearchDirs": [
            "C:\\MinGW",
            "C::\\Program Files\\MinGW"
        ],
        "cmake.cmakePath": "cmake", //cmake.exe MUST BE IN $PATH
        "cmake.buildDirectory": "${workspaceFolder}/Pipeline",
        "cmake.sourceDirectory": "${workspaceFolder}/CMake",
        "cmake.configureSettings": {
            "SELECTED_CMAKE_KIT": "${buildKit}",
            "USER_MODULE_DIR": "${workspaceFolder}/CMake/Modules",
            "USER_BIN_DIR": "${workspaceFolder}/Binaries",
            "USER_SRC_DIR": "${workspaceFolder}/Sources"
        },
        "cmake.copyCompileCommands": "${workspaceFolder}/.vscode/compile_commands.json",
        "cmake.buildBeforeRun": true,
        "cmake.revealLog": "always",
        "cmake.ignoreKitEnv": false,
        "cmake.defaultVariants": {
            "buildType": {
                "default": "debug",
                "description": "The build type.",
                "choices": {
                    "debug": {
                        "short": "Debug",
                        "long": "Disable optimizations - include debug information.",
                        "buildType": "Debug"
                    },
                    "release": {
                        "short": "Release",
                        "long": "Optimize for speed - exclude debug information.",
                        "buildType": "Release"
                    },
                    "minsize": {
                        "short": "MinSizeRel",
                        "long": "Optimize for smallest binary size - exclude debug information.",
                        "buildType": "MinSizeRel"
                    },
                    "reldeb": {
                        "short": "RelWithDebInfo",
                        "long": "Optimize for speed - include debug information.",
                        "buildType": "RelWithDebInfo"
                    }
                }
            }
        },
        "cmake.cmakeCommunicationMode": "fileApi",
        "cmake.autoSelectActiveFolder": true,
        // IAR EMBEDDED WORKBENCH
        "iar.enabled": true,
        "iarvsc.configuration": "Debug",
        "iarvsc.ewp": "${workspaceFolder}\\EWARM\\*.ewp",
        "iarvsc.workbench": "${workspaceFolder}\\EWARM\\*.ewp",
        //Carl TODO: FIGURE OUT A WAY TO AUTOMATE DETECTION OF IAR TOOLCHAINS
        "iarvsc.compiler": "C:\\Program Files (x86)\\IAR Systems\\Embedded Workbench 8.4\\arm\\bin\\iccarm.exe",
        // BOOKMARKS
        "bookmarks.sideBar.expanded": true,
        //C and C++ LANGUAGE SETTINGS
        //https://code.visualstudio.com/docs/languages/cpp
        "C_Cpp.updateChannel": "Insiders",
        "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",
        "C_Cpp.default.enableConfigurationSquiggles": true,
        "C_Cpp.dimInactiveRegions": true,
        // LANGUAGES 
        "files.associations": {
            "*.c": "c",
            "*.h": "c",
            "*.hpp": "cpp",
            "*.cpp": "cpp",
            "*.s": "asm",
            "*as": "asm",
            "*.asm": "asm",
            "*.js": "javascript",
            "*.py": "python",
            "*.md": "markdown",
            "*.sh": "shell",
            "*.bash": "bash",
            "*.bat": "bat",
            "*.ps": "powershell",
            "*.tcc": "c",
            "algorithm": "c",
            "random": "c",
            "functional": "c",
            "limits": "c",
            "type_traits": "c",
            "utility": "c",
            "array": "c",
            "tuple": "c",
            "typeinfo": "c"
        }
    },

    // WORKSPACE EXTENSIONS
    "extensions": {
        "recommendations": [
            "ms-vscode.cmake-tools", 
            "ms-vscode.cpptools",
            "oderwat.indent-rainbow", 
            "pluyckx.iar-vsc", 
            "zip696.iar-tool",
            "CoenraadS.bracket-pair-colorizer",
            "alefragnani.Bookmarks",
            "twxs.cmake",
            "eamodio.gitlens",
            "GuillaumeLegrain.vscode-icf-syntax",
            "amapleaf.linker-script",
            "ZixuanWang.linkerscript",
            "dan-c-underwood.arm",
            "cheshirekow.cmake-format"
        ],
    },

    // WORKSPACE TASKS
    "tasks": {
        "version": "2.0.0",
        "tasks": [
            
        ]
    },
    
    // WORKSPACE RUNTIME (DEBUG/TEST/ETC)
    "launch": {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "Debug",
                "program": "${workspaceRoot}/Binaries/firmware.exe",
                "miDebuggerPath": "c:\\mingw\\bin\\gdb.exe",
                "type": "cppdbg",
                "request": "launch",
                "args": [],
                "stopAtEntry": true,
                "cwd": "${workspaceFolder}",
                "environment": [],
                "externalConsole": false,
                "logging": {
                    "exceptions": true,
                    "programOutput": true,
                    "engineLogging": false,
                    "moduleLoad": true
                },
                "linux": {
                    //specific commands for when run in linux env
                },
                "windows": {
                    //specific commands for when run in windows env
                },

            },
        ],

    }

}