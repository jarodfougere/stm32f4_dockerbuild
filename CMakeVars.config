BUILDNAME=Win32-mingw32-make
BUILD_NAME_SYSTEM_NAME=Win32
BUILD_TESTING=ON
BZRCOMMAND=BZRCOMMAND-NOTFOUND
BZR_UPDATE_OPTIONS=
CMAKE_ADDR2LINE=C:/MinGW/bin/addr2line.exe
CMAKE_AR=C:/MinGW/mingw32/bin/ar.exe
CMAKE_AR=C:/MinGW/mingw32/bin/ar.exe
CMAKE_ASM_COMPILER=C:/MinGW/bin/gcc.exe
CMAKE_ASM_COMPILER=C:/MinGW/bin/gcc.exe
CMAKE_ASM_COMPILER_AR=C:/MinGW/bin/gcc-ar.exe
CMAKE_ASM_COMPILER_AR=C:/MinGW/bin/gcc-ar.exe
CMAKE_ASM_COMPILER_ARG1=
CMAKE_ASM_COMPILER_ENV_VAR=ASM
CMAKE_ASM_COMPILER_ID=GNU
CMAKE_ASM_COMPILER_ID_VENDORS=GNU;Clang;AppleClang;ARMClang;HP;Intel;SunPro;XL;MSVC;TI;IAR;ARMCC;NASM;YASM;ADSP;QCC
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_ADSP=-version
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_ARMClang=--version
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_AppleClang=--version
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_Clang=--version
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_GNU=--version
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_HP=-V
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_Intel=--version
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_MSVC=-?
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_NASM=-v
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_QCC=-V
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_SunPro=-V
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_TI=-h
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_XL=-qversion
CMAKE_ASM_COMPILER_ID_VENDOR_FLAGS_YASM=--version
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_ADSP=Analog Devices
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_ARMCC=(ARM Compiler)|(ARM Assembler)
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_ARMClang=armclang
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_AppleClang=(Apple LLVM version)
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_Clang=(clang version)
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_GNU=(GNU assembler)|(GCC)|(Free Software Foundation)
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_HP=HP C
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_IAR=IAR Assembler
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_Intel=(ICC)
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_MSVC=Microsoft
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_NASM=(NASM version)
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_QCC=gcc_nto
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_SunPro=Sun C
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_TI=Texas Instruments
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_XL=XL C
CMAKE_ASM_COMPILER_ID_VENDOR_REGEX_YASM=(yasm)
CMAKE_ASM_COMPILER_LIST=C:/MinGW/bin/gcc.exe
CMAKE_ASM_COMPILER_LOADED=1
CMAKE_ASM_COMPILER_PREDEFINES_COMMAND=C:/MinGW/bin/gcc.exe;-dM;-E;-c;C:/Program Files/CMake/share/cmake-3.16/Modules/CMakeCXXCompilerABI.cpp
CMAKE_ASM_COMPILER_RANLIB=C:/MinGW/bin/gcc-ranlib.exe
CMAKE_ASM_COMPILER_RANLIB=C:/MinGW/bin/gcc-ranlib.exe
CMAKE_ASM_COMPILER_VERSION=
CMAKE_ASM_COMPILER_WORKS=1
CMAKE_ASM_COMPILE_OBJECT=<CMAKE_ASM_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>
CMAKE_ASM_COMPILE_OPTIONS_CREATE_PCH=-Winvalid-pch;-x;-include;<PCH_HEADER>
CMAKE_ASM_COMPILE_OPTIONS_PIC=-fPIC
CMAKE_ASM_COMPILE_OPTIONS_SYSROOT=--sysroot=
CMAKE_ASM_COMPILE_OPTIONS_USE_PCH=-Winvalid-pch;-include;<PCH_HEADER>
CMAKE_ASM_CREATE_ASSEMBLY_SOURCE=<CMAKE_ASM_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE>
CMAKE_ASM_CREATE_PREPROCESSED_SOURCE=<CMAKE_ASM_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE>
CMAKE_ASM_CREATE_STATIC_LIBRARY=<CMAKE_AR> cr <TARGET> <LINK_FLAGS> <OBJECTS> ;<CMAKE_RANLIB> <TARGET> 
CMAKE_ASM_FLAGS=
CMAKE_ASM_FLAGS_DEBUG=-g
CMAKE_ASM_FLAGS_DEBUG_INIT= -g
CMAKE_ASM_FLAGS_INIT=  
CMAKE_ASM_FLAGS_MINSIZEREL=-Os -DNDEBUG
CMAKE_ASM_FLAGS_MINSIZEREL_INIT= -Os -DNDEBUG
CMAKE_ASM_FLAGS_RELEASE=-O3 -DNDEBUG
CMAKE_ASM_FLAGS_RELEASE_INIT= -O3 -DNDEBUG
CMAKE_ASM_FLAGS_RELWITHDEBINFO=-O2 -g -DNDEBUG
CMAKE_ASM_FLAGS_RELWITHDEBINFO_INIT= -O2 -g -DNDEBUG
CMAKE_ASM_IGNORE_EXTENSIONS=h;H;o;O;obj;OBJ;def;DEF;rc;RC
CMAKE_ASM_INFOMATION_LOADED=1
CMAKE_ASM_LINKER_PREFERENCE=0
CMAKE_ASM_LINKER_WRAPPER_FLAG=-Wl,
CMAKE_ASM_LINKER_WRAPPER_FLAG_SEP=,
CMAKE_ASM_LINK_EXECUTABLE=<CMAKE_ASM_COMPILER> <FLAGS> <CMAKE_ASM_LINK_FLAGS> <LINK_FLAGS> <OBJECTS>  -o <TARGET> <LINK_LIBRARIES>
CMAKE_ASM_OUTPUT_EXTENSION=.obj
CMAKE_ASM_SOURCE_FILE_EXTENSIONS=s;S;asm
CMAKE_ASM_VERBOSE_FLAG=-v
CMAKE_AUTOGEN_ORIGIN_DEPENDS=ON
CMAKE_AUTOMOC_COMPILER_PREDEFINES=ON
CMAKE_AUTOMOC_MACRO_NAMES=Q_OBJECT;Q_GADGET;Q_NAMESPACE
CMAKE_AUTOMOC_PATH_PREFIX=ON
CMAKE_BASE_NAME=gcc
CMAKE_BINARY_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build
CMAKE_BUILD_TARGET=MY_SYSTEM
CMAKE_BUILD_TARGET=MY_SYSTEM
CMAKE_BUILD_TOOL=C:/MinGW/bin/mingw32-make.exe
CMAKE_BUILD_TYPE=
CMAKE_C11_COMPILE_FEATURES=c_std_11;c_static_assert
CMAKE_C11_EXTENSION_COMPILE_OPTION=-std=gnu11
CMAKE_C11_STANDARD_COMPILE_OPTION=-std=c11
CMAKE_C11_STANDARD__HAS_FULL_SUPPORT=ON
CMAKE_C90_COMPILE_FEATURES=c_std_90;c_function_prototypes
CMAKE_C90_EXTENSION_COMPILE_OPTION=-std=gnu90
CMAKE_C90_STANDARD_COMPILE_OPTION=-std=c90
CMAKE_C90_STANDARD__HAS_FULL_SUPPORT=ON
CMAKE_C99_COMPILE_FEATURES=c_std_99;c_restrict;c_variadic_macros
CMAKE_C99_EXTENSION_COMPILE_OPTION=-std=gnu99
CMAKE_C99_STANDARD_COMPILE_OPTION=-std=c99
CMAKE_C99_STANDARD__HAS_FULL_SUPPORT=ON
CMAKE_CFG_INTDIR=.
CMAKE_COLOR_MAKEFILE=ON
CMAKE_COMMAND=C:/Program Files/CMake/bin/cmake.exe
CMAKE_COMPILER_IS_GNUCC=1
CMAKE_COMPILER_IS_GNUCXX=1
CMAKE_COMPILER_IS_MINGW=1
CMAKE_CPACK_COMMAND=C:/Program Files/CMake/bin/cpack.exe
CMAKE_CREATE_WIN32_EXE=-mwindows
CMAKE_CROSSCOMPILING=FALSE
CMAKE_CTEST_COMMAND=C:/Program Files/CMake/bin/ctest.exe
CMAKE_CURRENT_BINARY_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build
CMAKE_CURRENT_LIST_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard
CMAKE_CURRENT_LIST_FILE=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/CMakeLists.txt
CMAKE_CURRENT_SOURCE_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard
CMAKE_CXX11_COMPILE_FEATURES=cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates
CMAKE_CXX11_EXTENSION_COMPILE_OPTION=-std=gnu++11
CMAKE_CXX11_STANDARD_COMPILE_OPTION=-std=c++11
CMAKE_CXX11_STANDARD__HAS_FULL_SUPPORT=ON
CMAKE_CXX14_COMPILE_FEATURES=cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates
CMAKE_CXX14_EXTENSION_COMPILE_OPTION=-std=gnu++14
CMAKE_CXX14_STANDARD_COMPILE_OPTION=-std=c++14
CMAKE_CXX14_STANDARD__HAS_FULL_SUPPORT=ON
CMAKE_CXX17_COMPILE_FEATURES=cxx_std_17
CMAKE_CXX17_EXTENSION_COMPILE_OPTION=-std=gnu++1z
CMAKE_CXX17_STANDARD_COMPILE_OPTION=-std=c++1z
CMAKE_CXX20_COMPILE_FEATURES=
CMAKE_CXX98_COMPILE_FEATURES=cxx_std_98;cxx_template_template_parameters
CMAKE_CXX98_EXTENSION_COMPILE_OPTION=-std=gnu++98
CMAKE_CXX98_STANDARD_COMPILE_OPTION=-std=c++98
CMAKE_CXX98_STANDARD__HAS_FULL_SUPPORT=ON
CMAKE_CXX_ABI_COMPILED=TRUE
CMAKE_CXX_ARCHIVE_APPEND=<CMAKE_AR> q  <TARGET> <LINK_FLAGS> <OBJECTS>
CMAKE_CXX_ARCHIVE_APPEND_IPO="C:/MinGW/bin/gcc-ar.exe" r <TARGET> <LINK_FLAGS> <OBJECTS>
CMAKE_CXX_ARCHIVE_CREATE=<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>
CMAKE_CXX_ARCHIVE_CREATE_IPO="C:/MinGW/bin/gcc-ar.exe" cr <TARGET> <LINK_FLAGS> <OBJECTS>
CMAKE_CXX_ARCHIVE_FINISH=<CMAKE_RANLIB> <TARGET>
CMAKE_CXX_ARCHIVE_FINISH_IPO="C:/MinGW/bin/gcc-ranlib.exe" <TARGET>
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX=
CMAKE_CXX_COMPILER=C:/MinGW/bin/g++.exe
CMAKE_CXX_COMPILER=C:/MinGW/bin/g++.exe
CMAKE_CXX_COMPILER_ABI=
CMAKE_CXX_COMPILER_AR=C:/MinGW/bin/gcc-ar.exe
CMAKE_CXX_COMPILER_AR=C:/MinGW/bin/gcc-ar.exe
CMAKE_CXX_COMPILER_ARCHITECTURE_ID=
CMAKE_CXX_COMPILER_ARG1=
CMAKE_CXX_COMPILER_ENV_VAR=CXX
CMAKE_CXX_COMPILER_EXCLUDE=CC;aCC;xlC
CMAKE_CXX_COMPILER_FRONTEND_VARIANT=
CMAKE_CXX_COMPILER_ID=GNU
CMAKE_CXX_COMPILER_ID_PLATFORM_CONTENT=#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif
#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number components. */
#ifdef COMPILER_VERSION_MAJOR
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";


CMAKE_CXX_COMPILER_ID_RUN=1
CMAKE_CXX_COMPILER_ID_TEST_FLAGS=-c;--c++;--ec++;--target=arm-arm-none-eabi -mcpu=cortex-m3
CMAKE_CXX_COMPILER_ID_TOOL_MATCH_INDEX=2
CMAKE_CXX_COMPILER_ID_TOOL_MATCH_REGEX=
Ld[^
]*(
[ 	]+[^
]*)*
[ 	]+([^ 	

]+)[^

]*-o[^

]*CompilerIdCXX/(\./)?(CompilerIdCXX.(framework|xctest)/)?CompilerIdCXX[ 	
\"]
CMAKE_CXX_COMPILER_ID_VENDORS=IAR
CMAKE_CXX_COMPILER_ID_VENDOR_REGEX_IAR=IAR .+ Compiler
CMAKE_CXX_COMPILER_INIT=C:/MinGW/bin/g++.exe
CMAKE_CXX_COMPILER_LIST=C:/MinGW/bin/g++.exe
CMAKE_CXX_COMPILER_LOADED=1
CMAKE_CXX_COMPILER_NAMES=c++
CMAKE_CXX_COMPILER_PREDEFINES_COMMAND=C:/MinGW/bin/g++.exe;-dM;-E;-c;C:/Program Files/CMake/share/cmake-3.16/Modules/CMakeCXXCompilerABI.cpp
CMAKE_CXX_COMPILER_PRODUCED_FILES=a.exe
CMAKE_CXX_COMPILER_PRODUCED_OUTPUT=
CMAKE_CXX_COMPILER_RANLIB=C:/MinGW/bin/gcc-ranlib.exe
CMAKE_CXX_COMPILER_RANLIB=C:/MinGW/bin/gcc-ranlib.exe
CMAKE_CXX_COMPILER_VERSION=6.3.0
CMAKE_CXX_COMPILER_VERSION_INTERNAL=
CMAKE_CXX_COMPILER_WORKS=TRUE
CMAKE_CXX_COMPILER_WRAPPER=
CMAKE_CXX_COMPILE_FEATURES=cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates;cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates;cxx_std_17
CMAKE_CXX_COMPILE_OBJECT=<CMAKE_CXX_COMPILER>  <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>
CMAKE_CXX_COMPILE_OPTIONS_CREATE_PCH=-Winvalid-pch;-x;c++-header;-include;<PCH_HEADER>
CMAKE_CXX_COMPILE_OPTIONS_IPO=-flto;-fno-fat-lto-objects
CMAKE_CXX_COMPILE_OPTIONS_SYSROOT=--sysroot=
CMAKE_CXX_COMPILE_OPTIONS_USE_PCH=-Winvalid-pch;-include;<PCH_HEADER>
CMAKE_CXX_COMPILE_OPTIONS_VISIBILITY=-fvisibility=
CMAKE_CXX_COMPILE_OPTIONS_VISIBILITY_INLINES_HIDDEN=-fno-keep-inline-dllexport
CMAKE_CXX_CREATE_ASSEMBLY_SOURCE=<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE>
CMAKE_CXX_CREATE_PREPROCESSED_SOURCE=<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE>
CMAKE_CXX_CREATE_SHARED_LIBRARY=<CMAKE_COMMAND> -E remove -f <OBJECT_DIR>/objects.a;<CMAKE_AR> cr <OBJECT_DIR>/objects.a <OBJECTS>;<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> -Wl,--whole-archive <OBJECT_DIR>/objects.a -Wl,--no-whole-archive <LINK_LIBRARIES>
CMAKE_CXX_CREATE_SHARED_MODULE=<CMAKE_COMMAND> -E remove -f <OBJECT_DIR>/objects.a;<CMAKE_AR> cr <OBJECT_DIR>/objects.a <OBJECTS>;<CMAKE_CXX_COMPILER> <CMAKE_SHARED_MODULE_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS> -o <TARGET> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> -Wl,--whole-archive <OBJECT_DIR>/objects.a -Wl,--no-whole-archive <LINK_LIBRARIES>
CMAKE_CXX_FLAGS=
CMAKE_CXX_FLAGS_DEBUG=-g
CMAKE_CXX_FLAGS_DEBUG_INIT= -g
CMAKE_CXX_FLAGS_INIT=  
CMAKE_CXX_FLAGS_MINSIZEREL=-Os -DNDEBUG
CMAKE_CXX_FLAGS_MINSIZEREL_INIT= -Os -DNDEBUG
CMAKE_CXX_FLAGS_RELEASE=-O3 -DNDEBUG
CMAKE_CXX_FLAGS_RELEASE_INIT= -O3 -DNDEBUG
CMAKE_CXX_FLAGS_RELWITHDEBINFO=-O2 -g -DNDEBUG
CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT= -O2 -g -DNDEBUG
CMAKE_CXX_IGNORE_EXTENSIONS=inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES=C:/MinGW/lib/gcc/mingw32/6.3.0/include/c++;C:/MinGW/lib/gcc/mingw32/6.3.0/include/c++/mingw32;C:/MinGW/lib/gcc/mingw32/6.3.0/include/c++/backward;C:/MinGW/lib/gcc/mingw32/6.3.0/include;C:/MinGW/include;C:/MinGW/lib/gcc/mingw32/6.3.0/include-fixed;C:/MinGW/mingw32/include
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES=C:/MinGW/lib/gcc/mingw32/6.3.0;C:/MinGW/lib/gcc;C:/MinGW/mingw32/lib;C:/MinGW/lib
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES=
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES=stdc++;mingw32;gcc_s;gcc;moldname;mingwex;advapi32;shell32;user32;kernel32;mingw32;gcc_s;gcc;moldname;mingwex
CMAKE_CXX_INFORMATION_LOADED=1
CMAKE_CXX_LIBRARY_ARCHITECTURE=
CMAKE_CXX_LINKER_PREFERENCE=30
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES=1
CMAKE_CXX_LINKER_WRAPPER_FLAG=-Wl,
CMAKE_CXX_LINKER_WRAPPER_FLAG_SEP=,
CMAKE_CXX_LINK_EXECUTABLE=<CMAKE_COMMAND> -E remove -f <OBJECT_DIR>/objects.a;<CMAKE_AR> cr <OBJECT_DIR>/objects.a <OBJECTS>;<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> -Wl,--whole-archive <OBJECT_DIR>/objects.a -Wl,--no-whole-archive  -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> <LINK_LIBRARIES>
CMAKE_CXX_OUTPUT_EXTENSION=.obj
CMAKE_CXX_PLATFORM_ID=MinGW
CMAKE_CXX_RESPONSE_FILE_LINK_FLAG=@
CMAKE_CXX_SIMULATE_ID=
CMAKE_CXX_SIMULATE_VERSION=
CMAKE_CXX_SIZEOF_DATA_PTR=4
CMAKE_CXX_SOURCE_FILE_EXTENSIONS=C;M;c++;cc;cpp;cxx;mm;CPP
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT=14
CMAKE_CXX_STANDARD_DEFAULT=14
CMAKE_CXX_STANDARD_LIBRARIES=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32
CMAKE_CXX_STANDARD_LIBRARIES_INIT=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32
CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=1
CMAKE_CXX_USE_RESPONSE_FILE_FOR_LIBRARIES=1
CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS=1
CMAKE_CXX_VERBOSE_FLAG=-v
CMAKE_CXX_XCODE_ARCHS=
CMAKE_C_ABI_COMPILED=TRUE
CMAKE_C_ARCHIVE_APPEND=<CMAKE_AR> q  <TARGET> <LINK_FLAGS> <OBJECTS>
CMAKE_C_ARCHIVE_APPEND_IPO="C:/MinGW/bin/gcc-ar.exe" r <TARGET> <LINK_FLAGS> <OBJECTS>
CMAKE_C_ARCHIVE_CREATE=<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>
CMAKE_C_ARCHIVE_CREATE_IPO="C:/MinGW/bin/gcc-ar.exe" cr <TARGET> <LINK_FLAGS> <OBJECTS>
CMAKE_C_ARCHIVE_FINISH=<CMAKE_RANLIB> <TARGET>
CMAKE_C_ARCHIVE_FINISH_IPO="C:/MinGW/bin/gcc-ranlib.exe" <TARGET>
CMAKE_C_CL_SHOWINCLUDES_PREFIX=
CMAKE_C_COMPILER=C:/MinGW/bin/gcc.exe
CMAKE_C_COMPILER=C:/MinGW/bin/gcc.exe
CMAKE_C_COMPILER_ABI=
CMAKE_C_COMPILER_AR=C:/MinGW/bin/gcc-ar.exe
CMAKE_C_COMPILER_AR=C:/MinGW/bin/gcc-ar.exe
CMAKE_C_COMPILER_ARCHITECTURE_ID=
CMAKE_C_COMPILER_ARG1=
CMAKE_C_COMPILER_ENV_VAR=CC
CMAKE_C_COMPILER_FRONTEND_VARIANT=
CMAKE_C_COMPILER_ID=GNU
CMAKE_C_COMPILER_ID_PLATFORM_CONTENT=#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif
#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number components. */
#ifdef COMPILER_VERSION_MAJOR
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";


CMAKE_C_COMPILER_ID_RUN=1
CMAKE_C_COMPILER_ID_TEST_FLAGS=-c;-Aa;-D__CLASSIC_C__;--target=arm-arm-none-eabi -mcpu=cortex-m3
CMAKE_C_COMPILER_ID_TOOL_MATCH_INDEX=2
CMAKE_C_COMPILER_ID_TOOL_MATCH_REGEX=
Ld[^
]*(
[ 	]+[^
]*)*
[ 	]+([^ 	

]+)[^

]*-o[^

]*CompilerIdC/(\./)?(CompilerIdC.(framework|xctest)/)?CompilerIdC[ 	
\"]
CMAKE_C_COMPILER_ID_VENDORS=IAR
CMAKE_C_COMPILER_ID_VENDOR_REGEX_IAR=IAR .+ Compiler
CMAKE_C_COMPILER_INIT=C:/MinGW/bin/gcc.exe
CMAKE_C_COMPILER_LIST=C:/MinGW/bin/gcc.exe
CMAKE_C_COMPILER_LOADED=1
CMAKE_C_COMPILER_NAMES=cc
CMAKE_C_COMPILER_PREDEFINES_COMMAND=C:/MinGW/bin/gcc.exe;-dM;-E;-c;C:/Program Files/CMake/share/cmake-3.16/Modules/CMakeCXXCompilerABI.cpp
CMAKE_C_COMPILER_PRODUCED_FILES=a.exe
CMAKE_C_COMPILER_PRODUCED_OUTPUT=
CMAKE_C_COMPILER_RANLIB=C:/MinGW/bin/gcc-ranlib.exe
CMAKE_C_COMPILER_RANLIB=C:/MinGW/bin/gcc-ranlib.exe
CMAKE_C_COMPILER_VERSION=6.3.0
CMAKE_C_COMPILER_VERSION_INTERNAL=
CMAKE_C_COMPILER_WORKS=TRUE
CMAKE_C_COMPILER_WRAPPER=
CMAKE_C_COMPILE_FEATURES=c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macros;c_std_11;c_static_assert
CMAKE_C_COMPILE_OBJECT=<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT>   -c <SOURCE>
CMAKE_C_COMPILE_OPTIONS_CREATE_PCH=-Winvalid-pch;-x;c-header;-include;<PCH_HEADER>
CMAKE_C_COMPILE_OPTIONS_IPO=-flto;-fno-fat-lto-objects
CMAKE_C_COMPILE_OPTIONS_PIC=
CMAKE_C_COMPILE_OPTIONS_PIE=
CMAKE_C_COMPILE_OPTIONS_SYSROOT=--sysroot=
CMAKE_C_COMPILE_OPTIONS_USE_PCH=-Winvalid-pch;-include;<PCH_HEADER>
CMAKE_C_COMPILE_OPTIONS_VISIBILITY=-fvisibility=
CMAKE_C_CREATE_ASSEMBLY_SOURCE=<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE>
CMAKE_C_CREATE_PREPROCESSED_SOURCE=<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE>
CMAKE_C_CREATE_SHARED_LIBRARY=<CMAKE_COMMAND> -E remove -f <OBJECT_DIR>/objects.a;<CMAKE_AR> cr <OBJECT_DIR>/objects.a <OBJECTS>;<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> -Wl,--whole-archive <OBJECT_DIR>/objects.a -Wl,--no-whole-archive <LINK_LIBRARIES>
CMAKE_C_CREATE_SHARED_MODULE=<CMAKE_COMMAND> -E remove -f <OBJECT_DIR>/objects.a;<CMAKE_AR> cr <OBJECT_DIR>/objects.a <OBJECTS>;<CMAKE_C_COMPILER> <CMAKE_SHARED_MODULE_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_C_FLAGS> -o <TARGET> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> -Wl,--whole-archive <OBJECT_DIR>/objects.a -Wl,--no-whole-archive <LINK_LIBRARIES>
CMAKE_C_FLAGS=
CMAKE_C_FLAGS_DEBUG=-g
CMAKE_C_FLAGS_DEBUG_INIT= -g
CMAKE_C_FLAGS_INIT=  
CMAKE_C_FLAGS_MINSIZEREL=-Os -DNDEBUG
CMAKE_C_FLAGS_MINSIZEREL_INIT= -Os -DNDEBUG
CMAKE_C_FLAGS_RELEASE=-O3 -DNDEBUG
CMAKE_C_FLAGS_RELEASE_INIT= -O3 -DNDEBUG
CMAKE_C_FLAGS_RELWITHDEBINFO=-O2 -g -DNDEBUG
CMAKE_C_FLAGS_RELWITHDEBINFO_INIT= -O2 -g -DNDEBUG
CMAKE_C_IGNORE_EXTENSIONS=h;H;o;O;obj;OBJ;def;DEF;rc;RC
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES=C:/MinGW/lib/gcc/mingw32/6.3.0/include;C:/MinGW/include;C:/MinGW/lib/gcc/mingw32/6.3.0/include-fixed;C:/MinGW/mingw32/include
CMAKE_C_IMPLICIT_LINK_DIRECTORIES=C:/MinGW/lib/gcc/mingw32/6.3.0;C:/MinGW/lib/gcc;C:/MinGW/mingw32/lib;C:/MinGW/lib
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES=
CMAKE_C_IMPLICIT_LINK_LIBRARIES=mingw32;gcc;moldname;mingwex;advapi32;shell32;user32;kernel32;mingw32;gcc;moldname;mingwex
CMAKE_C_INFORMATION_LOADED=1
CMAKE_C_LIBRARY_ARCHITECTURE=
CMAKE_C_LINKER_PREFERENCE=10
CMAKE_C_LINKER_WRAPPER_FLAG=-Wl,
CMAKE_C_LINKER_WRAPPER_FLAG_SEP=,
CMAKE_C_LINK_EXECUTABLE=<CMAKE_COMMAND> -E remove -f <OBJECT_DIR>/objects.a;<CMAKE_AR> cr <OBJECT_DIR>/objects.a <OBJECTS>;<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> -Wl,--whole-archive <OBJECT_DIR>/objects.a -Wl,--no-whole-archive  -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> -Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR> <LINK_LIBRARIES>
CMAKE_C_LINK_OPTIONS_NO_PIE=
CMAKE_C_LINK_OPTIONS_PIE=
CMAKE_C_OUTPUT_EXTENSION=.obj
CMAKE_C_PLATFORM_ID=MinGW
CMAKE_C_RESPONSE_FILE_LINK_FLAG=@
CMAKE_C_SIMULATE_ID=
CMAKE_C_SIMULATE_VERSION=
CMAKE_C_SIZEOF_DATA_PTR=4
CMAKE_C_SOURCE_FILE_EXTENSIONS=c;m
CMAKE_C_STANDARD_COMPUTED_DEFAULT=11
CMAKE_C_STANDARD_DEFAULT=11
CMAKE_C_STANDARD_LIBRARIES=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32
CMAKE_C_STANDARD_LIBRARIES_INIT=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32
CMAKE_C_USE_RESPONSE_FILE_FOR_INCLUDES=1
CMAKE_C_USE_RESPONSE_FILE_FOR_LIBRARIES=1
CMAKE_C_USE_RESPONSE_FILE_FOR_OBJECTS=1
CMAKE_C_VERBOSE_FLAG=-v
CMAKE_C_XCODE_ARCHS=
CMAKE_DEPFILE_FLAGS_ASM=-MD -MT <OBJECT> -MF <DEPFILE>
CMAKE_DEPFILE_FLAGS_C=-MD -MT <OBJECT> -MF <DEPFILE>
CMAKE_DEPFILE_FLAGS_CXX=-MD -MT <OBJECT> -MF <DEPFILE>
CMAKE_DLLTOOL=C:/MinGW/mingw32/bin/dlltool.exe
CMAKE_DL_LIBS=
CMAKE_EDIT_COMMAND=C:/Program Files/CMake/bin/cmake-gui.exe
CMAKE_EFFECTIVE_SYSTEM_NAME=Windows
CMAKE_EXECUTABLE_FORMAT=Unknown
CMAKE_EXECUTABLE_SUFFIX=.exe
CMAKE_EXE_LINKER_FLAGS=
CMAKE_EXE_LINKER_FLAGS_DEBUG=
CMAKE_EXE_LINKER_FLAGS_INIT=  
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL=
CMAKE_EXE_LINKER_FLAGS_RELEASE=
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO=
CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS=-Wl,-Bdynamic
CMAKE_EXE_LINK_DYNAMIC_C_FLAGS=-Wl,-Bdynamic
CMAKE_EXE_LINK_STATIC_CXX_FLAGS=-Wl,-Bstatic
CMAKE_EXE_LINK_STATIC_C_FLAGS=-Wl,-Bstatic
CMAKE_EXTRA_GENERATOR=
CMAKE_EXTRA_LINK_EXTENSIONS=.lib
CMAKE_FILES_DIRECTORY=/CMakeFiles
CMAKE_FIND_LIBRARY_PREFIXES=lib;
CMAKE_FIND_LIBRARY_SUFFIXES=.dll;.dll.a;.a;.lib
CMAKE_GENERATOR=MinGW Makefiles
CMAKE_GENERATOR_CC=C:/MinGW/bin/gcc.exe
CMAKE_GENERATOR_CXX=C:/MinGW/bin/g++.exe
CMAKE_GENERATOR_INSTANCE=
CMAKE_GENERATOR_PLATFORM=
CMAKE_GENERATOR_RC=C:/MinGW/bin/windres.exe
CMAKE_GENERATOR_TOOLSET=
CMAKE_GNULD_IMAGE_VERSION=-Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR>
CMAKE_GNUtoMS=OFF
CMAKE_HOME_DIRECTORY=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard
CMAKE_HOST_PATH=C:/Program Files/CMake/bin
CMAKE_HOST_SYSTEM=Windows-10.0.17763
CMAKE_HOST_SYSTEM_NAME=Windows
CMAKE_HOST_SYSTEM_PROCESSOR=AMD64
CMAKE_HOST_SYSTEM_VERSION=10.0.17763
CMAKE_HOST_WIN32=1
CMAKE_IMPORT_LIBRARY_PREFIX=lib
CMAKE_IMPORT_LIBRARY_SUFFIX=.dll.a
CMAKE_INCLUDE_FLAG_ASM=-I
CMAKE_INCLUDE_FLAG_C=-I
CMAKE_INCLUDE_FLAG_CXX=-I
CMAKE_INCLUDE_FLAG_RC=-I
CMAKE_INCLUDE_SYSTEM_FLAG_ASM=-isystem 
CMAKE_INCLUDE_SYSTEM_FLAG_C=-isystem 
CMAKE_INCLUDE_SYSTEM_FLAG_CXX=-isystem 
CMAKE_INSTALL_DEFAULT_COMPONENT_NAME=Unspecified
CMAKE_INSTALL_PREFIX=C:/Program Files (x86)/aetheraBoard
CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT=1
CMAKE_LIBRARY_PATH_FLAG=-L
CMAKE_LIBRARY_PATH_TERMINATOR=
CMAKE_LINKER=C:/MinGW/mingw32/bin/ld.exe
CMAKE_LINKER=C:/MinGW/mingw32/bin/ld.exe
CMAKE_LINK_DEF_FILE_FLAG=
CMAKE_LINK_LIBRARY_FLAG=-l
CMAKE_LINK_LIBRARY_SUFFIX=
CMAKE_MAJOR_VERSION=3
CMAKE_MAKE_PROGRAM=C:/MinGW/bin/mingw32-make.exe
CMAKE_MATCH_0=Windows
CMAKE_MATCH_1=
CMAKE_MATCH_COUNT=0
CMAKE_MINIMUM_REQUIRED_VERSION=3.16.0
CMAKE_MINOR_VERSION=16
CMAKE_MODULE_LINKER_FLAGS=
CMAKE_MODULE_LINKER_FLAGS_DEBUG=
CMAKE_MODULE_LINKER_FLAGS_INIT=  
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL=
CMAKE_MODULE_LINKER_FLAGS_RELEASE=
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO=
CMAKE_MODULE_PATH=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/CMakeModules
CMAKE_MT=
CMAKE_NM=C:/MinGW/mingw32/bin/nm.exe
CMAKE_OBJCOPY=C:/MinGW/mingw32/bin/objcopy.exe
CMAKE_OBJDUMP=C:/MinGW/mingw32/bin/objdump.exe
CMAKE_PARENT_LIST_FILE=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/CMakeLists.txt
CMAKE_PATCH_VERSION=0
CMAKE_PCH_EXTENSION=.gch
CMAKE_PCH_PROLOGUE=#pragma GCC system_header
CMAKE_PLATFORM_INFO_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build/CMakeFiles/3.16.0-rc3
CMAKE_PLATFORM_INFO_INITIALIZED=1
CMAKE_PROJECT_DESCRIPTION=
CMAKE_PROJECT_HOMEPAGE_URL=
CMAKE_PROJECT_NAME=aetheraBoard
CMAKE_PROJECT_VERSION=1.0.0
CMAKE_PROJECT_VERSION_MAJOR=1
CMAKE_PROJECT_VERSION_MINOR=0
CMAKE_PROJECT_VERSION_PATCH=0
CMAKE_PROJECT_VERSION_TWEAK=
CMAKE_RANLIB=C:/MinGW/mingw32/bin/ranlib.exe
CMAKE_RANLIB=C:/MinGW/mingw32/bin/ranlib.exe
CMAKE_RC_COMPILER=C:/MinGW/bin/windres.exe
CMAKE_RC_COMPILER=C:/MinGW/bin/windres.exe
CMAKE_RC_COMPILER_ARG1=
CMAKE_RC_COMPILER_ENV_VAR=RC
CMAKE_RC_COMPILER_INIT=C:/MinGW/bin/windres.exe
CMAKE_RC_COMPILER_LIST=C:/MinGW/bin/windres.exe
CMAKE_RC_COMPILER_LOADED=1
CMAKE_RC_COMPILER_WORKS=1
CMAKE_RC_COMPILE_OBJECT=<CMAKE_RC_COMPILER> -O coff <DEFINES> <INCLUDES> <FLAGS> <SOURCE> <OBJECT>
CMAKE_RC_FLAGS=
CMAKE_RC_FLAGS_DEBUG=
CMAKE_RC_FLAGS_INIT= 
CMAKE_RC_FLAGS_MINSIZEREL=
CMAKE_RC_FLAGS_RELEASE=
CMAKE_RC_FLAGS_RELWITHDEBINFO=
CMAKE_RC_FLAG_REGEX=^[-/](D|I)
CMAKE_RC_INFORMATION_LOADED=1
CMAKE_RC_OUTPUT_EXTENSION=.obj
CMAKE_RC_SOURCE_FILE_EXTENSIONS=rc;RC
CMAKE_READELF=C:/MinGW/mingw32/bin/readelf.exe
CMAKE_ROOT=C:/Program Files/CMake/share/cmake-3.16
CMAKE_SH=CMAKE_SH-NOTFOUND
CMAKE_SHARED_LIBRARY_ASM_FLAGS=-fPIC
CMAKE_SHARED_LIBRARY_CREATE_ASM_FLAGS=-shared
CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS=-shared
CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS=-shared
CMAKE_SHARED_LIBRARY_C_FLAGS=
CMAKE_SHARED_LIBRARY_LINK_C_FLAGS=
CMAKE_SHARED_LIBRARY_LINK_DYNAMIC_CXX_FLAGS=-Wl,-Bdynamic
CMAKE_SHARED_LIBRARY_LINK_DYNAMIC_C_FLAGS=-Wl,-Bdynamic
CMAKE_SHARED_LIBRARY_LINK_STATIC_CXX_FLAGS=-Wl,-Bstatic
CMAKE_SHARED_LIBRARY_LINK_STATIC_C_FLAGS=-Wl,-Bstatic
CMAKE_SHARED_LIBRARY_PREFIX=lib
CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG=
CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP=
CMAKE_SHARED_LIBRARY_SUFFIX=.dll
CMAKE_SHARED_LINKER_FLAGS=
CMAKE_SHARED_LINKER_FLAGS_DEBUG=
CMAKE_SHARED_LINKER_FLAGS_INIT=  
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL=
CMAKE_SHARED_LINKER_FLAGS_RELEASE=
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO=
CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS=-shared
CMAKE_SHARED_MODULE_CREATE_C_FLAGS=-shared
CMAKE_SHARED_MODULE_LINK_DYNAMIC_CXX_FLAGS=-Wl,-Bdynamic
CMAKE_SHARED_MODULE_LINK_DYNAMIC_C_FLAGS=-Wl,-Bdynamic
CMAKE_SHARED_MODULE_LINK_STATIC_CXX_FLAGS=-Wl,-Bstatic
CMAKE_SHARED_MODULE_LINK_STATIC_C_FLAGS=-Wl,-Bstatic
CMAKE_SHARED_MODULE_PREFIX=lib
CMAKE_SHARED_MODULE_SUFFIX=.dll
CMAKE_SIZEOF_VOID_P=4
CMAKE_SKIP_INSTALL_RPATH=NO
CMAKE_SKIP_RPATH=NO
CMAKE_SOURCE_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard
CMAKE_STATIC_LIBRARY_PREFIX=lib
CMAKE_STATIC_LIBRARY_SUFFIX=.a
CMAKE_STATIC_LINKER_FLAGS=
CMAKE_STATIC_LINKER_FLAGS_DEBUG=
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL=
CMAKE_STATIC_LINKER_FLAGS_RELEASE=
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO=
CMAKE_STRIP=C:/MinGW/mingw32/bin/strip.exe
CMAKE_SYSTEM=Windows-10.0.17763
CMAKE_SYSTEM_AND_RC_COMPILER_INFO_FILE=C:/Program Files/CMake/share/cmake-3.16/Modules/Platform/Windows-windres.cmake
CMAKE_SYSTEM_INFO_FILE=Platform/Windows
CMAKE_SYSTEM_LIBRARY_PATH=C:/Program Files (x86)/aetheraBoard/bin;C:/Program Files/CMake/bin;/bin
CMAKE_SYSTEM_LOADED=1
CMAKE_SYSTEM_NAME=Windows
CMAKE_SYSTEM_PREFIX_PATH=C:/Program Files;C:/Program Files (x86);C:/Program Files/CMake;C:/Program Files (x86)/aetheraBoard
CMAKE_SYSTEM_PROCESSOR=AMD64
CMAKE_SYSTEM_SPECIFIC_INFORMATION_LOADED=1
CMAKE_SYSTEM_SPECIFIC_INITIALIZE_LOADED=1
CMAKE_SYSTEM_VERSION=10.0.17763
CMAKE_TARGET_PATH=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Binaries/
CMAKE_TESTING_ENABLED=1
CMAKE_TWEAK_VERSION=0
CMAKE_VERBOSE_MAKEFILE=FALSE
CMAKE_VERSION=3.16.0-rc3
COMPILER_BASENAME=gcc.exe
COMPRESS_SUBMISSION=ON
COVERAGE_COMMAND=C:/MinGW/bin/gcov.exe
COVERAGE_EXTRA_FLAGS=-l
CPACK_BINARY_7Z=OFF
CPACK_BINARY_BUNDLE=
CPACK_BINARY_CYGWIN=
CPACK_BINARY_DEB=
CPACK_BINARY_DRAGNDROP=
CPACK_BINARY_FREEBSD=
CPACK_BINARY_IFW=OFF
CPACK_BINARY_NSIS=ON
CPACK_BINARY_NUGET=OFF
CPACK_BINARY_OSXX11=
CPACK_BINARY_PACKAGEMAKER=
CPACK_BINARY_PRODUCTBUILD=
CPACK_BINARY_RPM=
CPACK_BINARY_STGZ=
CPACK_BINARY_TBZ2=
CPACK_BINARY_TGZ=
CPACK_BINARY_TXZ=
CPACK_BINARY_TZ=
CPACK_BINARY_WIX=OFF
CPACK_BINARY_ZIP=OFF
CPACK_BUILD_SOURCE_DIRS=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build
CPACK_CMAKE_GENERATOR=MinGW Makefiles
CPACK_COMPONENTS_ALL=
CPACK_COMPONENT_UNSPECIFIED_HIDDEN=TRUE
CPACK_COMPONENT_UNSPECIFIED_REQUIRED=TRUE
CPACK_GENERATOR=7Z;ZIP
CPACK_IGNORE_FILES=/CVS/;/\\.svn/;/\\.bzr/;/\\.hg/;/\\.git/;\\.swp\$;\\.#;/#
CPACK_INSTALLED_DIRECTORIES=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard;/
CPACK_INSTALL_CMAKE_PROJECTS=
CPACK_INSTALL_PREFIX=C:/Program Files (x86)/aetheraBoard
CPACK_MODULE_PATH=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/CMakeModules
CPACK_NSIS_DISPLAY_NAME=aetheraBoard 1.0.0
CPACK_NSIS_INSTALLER_ICON_CODE=
CPACK_NSIS_INSTALLER_MUI_ICON_CODE=
CPACK_NSIS_INSTALL_ROOT=$PROGRAMFILES
CPACK_NSIS_PACKAGE_NAME=aetheraBoard 1.0.0
CPACK_OUTPUT_CONFIG_FILE=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build/CPackConfig.cmake
CPACK_PACKAGE_DEFAULT_LOCATION=/
CPACK_PACKAGE_DESCRIPTION_FILE=C:/Program Files/CMake/share/cmake-3.16/Templates/CPack.GenericDescription.txt
CPACK_PACKAGE_DESCRIPTION_SUMMARY=aetheraBoard built using CMake
CPACK_PACKAGE_FILE_NAME=aetheraBoard-1.0.0-Source
CPACK_PACKAGE_INSTALL_DIRECTORY=aetheraBoard 1.0.0
CPACK_PACKAGE_INSTALL_REGISTRY_KEY=aetheraBoard 1.0.0
CPACK_PACKAGE_NAME=aetheraBoard
CPACK_PACKAGE_RELOCATABLE=true
CPACK_PACKAGE_VENDOR=Humanity
CPACK_PACKAGE_VERSION=1.0.0
CPACK_PACKAGE_VERSION_MAJOR=1
CPACK_PACKAGE_VERSION_MINOR=0
CPACK_PACKAGE_VERSION_PATCH=0
CPACK_PROJECT_NAME=aetheraBoard
CPACK_PROJECT_VERSION=1.0.0
CPACK_RESOURCE_FILE_LICENSE=C:/Program Files/CMake/share/cmake-3.16/Templates/CPack.GenericLicense.txt
CPACK_RESOURCE_FILE_README=C:/Program Files/CMake/share/cmake-3.16/Templates/CPack.GenericDescription.txt
CPACK_RESOURCE_FILE_WELCOME=C:/Program Files/CMake/share/cmake-3.16/Templates/CPack.GenericWelcome.txt
CPACK_RPM_PACKAGE_SOURCES=ON
CPACK_SET_DESTDIR=OFF
CPACK_SOURCE_7Z=ON
CPACK_SOURCE_CYGWIN=
CPACK_SOURCE_GENERATOR=7Z;ZIP
CPACK_SOURCE_IGNORE_FILES=/CVS/;/\\.svn/;/\\.bzr/;/\\.hg/;/\\.git/;\\.swp\$;\\.#;/#
CPACK_SOURCE_INSTALLED_DIRECTORIES=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard;/
CPACK_SOURCE_OUTPUT_CONFIG_FILE=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build/CPackSourceConfig.cmake
CPACK_SOURCE_PACKAGE_FILE_NAME=aetheraBoard-1.0.0-Source
CPACK_SOURCE_RPM=
CPACK_SOURCE_TBZ2=
CPACK_SOURCE_TGZ=
CPACK_SOURCE_TOPLEVEL_TAG=win32-Source
CPACK_SOURCE_TXZ=
CPACK_SOURCE_TZ=
CPACK_SOURCE_ZIP=ON
CPACK_STRIP_FILES=
CPACK_SYSTEM_NAME=win32
CPACK_TOPLEVEL_TAG=win32-Source
CPACK_WIX_SIZEOF_VOID_P=4
CPackComponent_CMake_INCLUDED=1
CPack_CMake_INCLUDED=1
CTEST_SUBMIT_RETRY_COUNT=3
CTEST_SUBMIT_RETRY_DELAY=5
CVSCOMMAND=CVSCOMMAND-NOTFOUND
CVS_UPDATE_OPTIONS=-d -A -P
CXX_TEST_WAS_RUN=1
C_TEST_WAS_RUN=1
DART_COMPILER=C:/MinGW/bin/g++.exe
DART_COMPILER_NAME=mingw32-make
DART_NAME_COMPONENT=NAME_WE
DART_TESTING_TIMEOUT=1500
DEFAULT_CTEST_CONFIGURATION_TYPE=Release
DROP_METHOD=http
EXECUTABLE_OUTPUT_PATH=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Binaries/
GITCOMMAND=C:/Program Files/Git/cmd/git.exe
HGCOMMAND=HGCOMMAND-NOTFOUND
MAKECOMMAND=C:/Program\ Files/CMake/bin/cmake.exe --build . --config "${CTEST_CONFIGURATION_TYPE}"
MAKECOMMAND_DEFAULT_VALUE=C:/Program\ Files/CMake/bin/cmake.exe --build . --config "${CTEST_CONFIGURATION_TYPE}"
MEMORYCHECK_COMMAND=MEMORYCHECK_COMMAND-NOTFOUND
MEMORYCHECK_SUPPRESSIONS_FILE=
MINGW=1
MSVC_CXX_ARCHITECTURE_ID=
MSVC_C_ARCHITECTURE_ID=
NIGHTLY_START_TIME=00:00:00 EDT
P4COMMAND=P4COMMAND-NOTFOUND
PRESET_CMAKE_SYSTEM_NAME=FALSE
PROJECT_BINARY_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build
PROJECT_DESCRIPTION=
PROJECT_HOMEPAGE_URL=
PROJECT_NAME=aetheraBoard
PROJECT_SOURCE_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard
PROJECT_VERSION=1.0.0
PROJECT_VERSION_MAJOR=1
PROJECT_VERSION_MINOR=0
PROJECT_VERSION_PATCH=0
PROJECT_VERSION_TWEAK=
PURIFYCOMMAND=
RUN_CONFIGURE=ON
SCPCOMMAND=
SITE=LAPTOP-G8L5T98U
SLURM_SBATCH_COMMAND=SLURM_SBATCH_COMMAND-NOTFOUND
SLURM_SRUN_COMMAND=SLURM_SRUN_COMMAND-NOTFOUND
SUBMIT_URL=http://
SVNCOMMAND=SVNCOMMAND-NOTFOUND
SVN_UPDATE_OPTIONS=
UPDATE_COMMAND=C:/Program Files/Git/cmd/git.exe
UPDATE_OPTIONS=
UPDATE_TYPE=git
WIN32=1
_ASM_COMPILER_WORKS=1
_CMAKE_ASM_IPO_MAY_BE_SUPPORTED_BY_COMPILER=NO
_CMAKE_ASM_IPO_SUPPORTED_BY_CMAKE=YES
_CMAKE_ASM_PIE_MAY_BE_SUPPORTED_BY_LINKER=NO
_CMAKE_CXX_IPO_MAY_BE_SUPPORTED_BY_COMPILER=YES
_CMAKE_CXX_IPO_SUPPORTED_BY_CMAKE=YES
_CMAKE_CXX_PIE_MAY_BE_SUPPORTED_BY_LINKER=NO
_CMAKE_C_IPO_MAY_BE_SUPPORTED_BY_COMPILER=YES
_CMAKE_C_IPO_SUPPORTED_BY_CMAKE=YES
_CMAKE_C_PIE_MAY_BE_SUPPORTED_BY_LINKER=NO
_CMAKE_INSTALL_DIR=C:/Program Files/CMake
_CMAKE_RC_COMPILER_NAME_WE=windres
_CMAKE_TOOLCHAIN_LOCATION=C:/MinGW/bin
_CPACK_OTHER_VARIABLES_=
set(CPACK_BINARY_7Z "OFF")
set(CPACK_BINARY_BUNDLE "")
set(CPACK_BINARY_CYGWIN "")
set(CPACK_BINARY_DEB "")
set(CPACK_BINARY_DRAGNDROP "")
set(CPACK_BINARY_FREEBSD "")
set(CPACK_BINARY_IFW "OFF")
set(CPACK_BINARY_NSIS "ON")
set(CPACK_BINARY_NUGET "OFF")
set(CPACK_BINARY_OSXX11 "")
set(CPACK_BINARY_PACKAGEMAKER "")
set(CPACK_BINARY_PRODUCTBUILD "")
set(CPACK_BINARY_RPM "")
set(CPACK_BINARY_STGZ "")
set(CPACK_BINARY_TBZ2 "")
set(CPACK_BINARY_TGZ "")
set(CPACK_BINARY_TXZ "")
set(CPACK_BINARY_TZ "")
set(CPACK_BINARY_WIX "OFF")
set(CPACK_BINARY_ZIP "OFF")
set(CPACK_BUILD_SOURCE_DIRS "C:/Users/cmatt/Documents/rimot-lowpower-sensorboard;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build")
set(CPACK_CMAKE_GENERATOR "MinGW Makefiles")
set(CPACK_COMPONENTS_ALL "")
set(CPACK_COMPONENT_UNSPECIFIED_HIDDEN "TRUE")
set(CPACK_COMPONENT_UNSPECIFIED_REQUIRED "TRUE")
set(CPACK_GENERATOR "7Z;ZIP")
set(CPACK_IGNORE_FILES "/CVS/;/\\.svn/;/\\.bzr/;/\\.hg/;/\\.git/;\\.swp\$;\\.#;/#")
set(CPACK_INSTALLED_DIRECTORIES "C:/Users/cmatt/Documents/rimot-lowpower-sensorboard;/")
set(CPACK_INSTALL_CMAKE_PROJECTS "")
set(CPACK_INSTALL_PREFIX "C:/Program Files (x86)/aetheraBoard")
set(CPACK_MODULE_PATH "C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/CMakeModules")
set(CPACK_NSIS_DISPLAY_NAME "aetheraBoard 1.0.0")
set(CPACK_NSIS_INSTALLER_ICON_CODE "")
set(CPACK_NSIS_INSTALLER_MUI_ICON_CODE "")
set(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES")
set(CPACK_NSIS_PACKAGE_NAME "aetheraBoard 1.0.0")
set(CPACK_OUTPUT_CONFIG_FILE "C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build/CPackConfig.cmake")
set(CPACK_PACKAGE_DEFAULT_LOCATION "/")
set(CPACK_PACKAGE_DESCRIPTION_FILE "C:/Program Files/CMake/share/cmake-3.16/Templates/CPack.GenericDescription.txt")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "aetheraBoard built using CMake")
set(CPACK_PACKAGE_FILE_NAME "aetheraBoard-1.0.0-Source")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "aetheraBoard 1.0.0")
set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "aetheraBoard 1.0.0")
set(CPACK_PACKAGE_NAME "aetheraBoard")
set(CPACK_PACKAGE_RELOCATABLE "true")
set(CPACK_PACKAGE_VENDOR "Humanity")
set(CPACK_PACKAGE_VERSION "1.0.0")
set(CPACK_PACKAGE_VERSION_MAJOR "1")
set(CPACK_PACKAGE_VERSION_MINOR "0")
set(CPACK_PACKAGE_VERSION_PATCH "0")
set(CPACK_PROJECT_NAME "aetheraBoard")
set(CPACK_PROJECT_VERSION "1.0.0")
set(CPACK_RESOURCE_FILE_LICENSE "C:/Program Files/CMake/share/cmake-3.16/Templates/CPack.GenericLicense.txt")
set(CPACK_RESOURCE_FILE_README "C:/Program Files/CMake/share/cmake-3.16/Templates/CPack.GenericDescription.txt")
set(CPACK_RESOURCE_FILE_WELCOME "C:/Program Files/CMake/share/cmake-3.16/Templates/CPack.GenericWelcome.txt")
set(CPACK_RPM_PACKAGE_SOURCES "ON")
set(CPACK_SET_DESTDIR "OFF")
set(CPACK_SOURCE_7Z "ON")
set(CPACK_SOURCE_CYGWIN "")
set(CPACK_SOURCE_GENERATOR "7Z;ZIP")
set(CPACK_SOURCE_IGNORE_FILES "/CVS/;/\\.svn/;/\\.bzr/;/\\.hg/;/\\.git/;\\.swp\$;\\.#;/#")
set(CPACK_SOURCE_INSTALLED_DIRECTORIES "C:/Users/cmatt/Documents/rimot-lowpower-sensorboard;/")
set(CPACK_SOURCE_OUTPUT_CONFIG_FILE "C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build/CPackSourceConfig.cmake")
set(CPACK_SOURCE_PACKAGE_FILE_NAME "aetheraBoard-1.0.0-Source")
set(CPACK_SOURCE_RPM "")
set(CPACK_SOURCE_TBZ2 "")
set(CPACK_SOURCE_TGZ "")
set(CPACK_SOURCE_TOPLEVEL_TAG "win32-Source")
set(CPACK_SOURCE_TXZ "")
set(CPACK_SOURCE_TZ "")
set(CPACK_SOURCE_ZIP "ON")
set(CPACK_STRIP_FILES "")
set(CPACK_SYSTEM_NAME "win32")
set(CPACK_TOPLEVEL_TAG "win32-Source")
set(CPACK_WIX_SIZEOF_VOID_P "4")
_INCLUDED_FILE=NOTFOUND
_INCLUDED_SYSTEM_INFO_FILE=C:/Program Files/CMake/share/cmake-3.16/Modules/Platform/Windows.cmake
_IN_TC=0
_SET_CMAKE_ASM_COMPILER_ARCHITECTURE_ID=
_SET_CMAKE_CXX_COMPILER_ARCHITECTURE_ID=
_SET_CMAKE_C_COMPILER_ARCHITECTURE_ID=
__COMPILER_CMAKE_COMMON_COMPILER_MACROS=1
__COMPILER_GNU=1
__WINDOWS_GNU=1
__WINDOWS_GNU_LD_RESPONSE=1
__WINDOWS_PATHS_INCLUDED=1
__conf_types=
__cpack_root_default=$PROGRAMFILES
__cpack_source_ignore_files_default=/CVS/;/\\.svn/;/\\.bzr/;/\\.hg/;/\\.git/;\\.swp\$;\\.#;/#
__cpack_system_name=win32
__gcc_hints=C:/MinGW/bin
__lto_flags=-flto;-fno-fat-lto-objects
__pch_header_C=c-header
__pch_header_CXX=c++-header
__version_x=
__version_x_y=
_help=GNU ld (GNU Binutils) 2.28

_isMultiConfig=0
_update_type=git
_var=
_ver=g++.exe (MinGW.org GCC-6.3.0-1) 6.3.0
Copyright (C) 2016 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


aetheraBoard_BINARY_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Build
aetheraBoard_DESCRIPTION=
aetheraBoard_HOMEPAGE_URL=
aetheraBoard_SOURCE_DIR=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard
aetheraBoard_VERSION=1.0.0
aetheraBoard_VERSION_MAJOR=1
aetheraBoard_VERSION_MINOR=0
aetheraBoard_VERSION_PATCH=0
aetheraBoard_VERSION_TWEAK=
all_SRCS=C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Application/Core/Src/gpio_interface.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Application/Core/Src/main.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Application/Core/Src/payloads.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Application/Core/Src/rf_interface.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Application/Core/Src/serialcommands.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Application/Core/Src/system_config.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Application/Port/Src/interrupts.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Drivers/Peripherals/Src/serial_data.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Middleware/Src/jsmn.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Middleware/Src/leds.c;C:/Users/cmatt/Documents/rimot-lowpower-sensorboard/Middleware/Src/parsing.c
cpack_input_file=C:/Program Files/CMake/share/cmake-3.16/Templates/CPackConfig.cmake.in
cpack_source_input_file=C:/Program Files/CMake/share/cmake-3.16/Templates/CPackConfig.cmake.in
d=
extension=
f=
l=
lang=
mode=
rule=
testtype=
type=
v=
var=
