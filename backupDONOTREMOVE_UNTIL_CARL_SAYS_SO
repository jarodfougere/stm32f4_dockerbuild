
#if COMPILING FOR TARGET PROCESSOR
set(CMAKE_SYSTEM_NAME GENERIC)
set(CMAKE_C_COMPILER_ARCHITECTURE_ID ARM)

#IAR DOESNT EXIST ON LINUX ANYWAY
set(EMBEDDED_WORKBENCH_ROOT_DIR "C:/Program Files (x86)/IAR Systems/Embedded Workbench 8.4/arm")

#SET(CPU_FLAGS "--cpu ARM9E") #update with correct value for target processo

# Set up the CMake variables for compiler and assembler
# (The reason for both C and CXX variables is that CMake
# treats C and C++ tools individually)
set(CMAKE_C_COMPILER "${EMBEDDED_WORKBENCH_ROOT_DIR}/bin/iccarm.exe" "${CPU_FLAGS} --dlib_config normal")
set(CMAKE_CXX_COMPILER "${EMBEDDED_WORKBENCH_ROOT_DIR}/bin/iccarm.exe" "${CPU_FLAGS} --dlib_config normal")
set(CMAKE_ASM_COMPILER "${EMBEDDED_WORKBENCH_ROOT_DIR}/bin/iasmarm.exe" "${CPU_FLAGS}")

# Set up the CMake variables for the linker
set(LINKER_SCRIPT "${EMBEDDED_WORKBENCH_ROOT_DIR}/config/linker/ST/str91xFx44.icf")
set(CMAKE_C_LINK_FLAGS "--semihosting --config ${LINKER_SCRIPT}")
set(CMAKE_CXX_LINK_FLAGS "--semihosting --config ${LINKER_SCRIPT}")
### END CMAKE_TOOLCHAIN_FILE


include(${CMAKE_MODULE_PATH}/Compiler/IAR-C.cmake)
#ELSE
#WE ARE COMPILING FOR THE LOCAL SYSTEM

#ENDIF